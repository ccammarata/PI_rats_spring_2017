library(foreign)
#general motif for reading in and cleaning data, although these files will already have had the
#column with tag text removed
data1 <- read.csv("24hr_09_21_16_1&2.csv", header=FALSE)
len <- length(data1[,1])
data1 <- data1[8:len,]
len <- length(data1[,1])
data1 <- data1*-1
colnames(data1) <- c("tags","enz_chan1","sent_chan2","nothing_1","nothing_2")
data1$seconds <- seq(0,((len-1)/2),0.5)
#plotting
# x= max(data1[2:5])
# plot(data1$seconds,data1$chan1, ylim=c(0,x), type = 'l')
# lines(data1$chan2)
# lines(data1$chan3)
# lines(data1$chan4)
for (channel in c(2,3)){
plot(data1$seconds,data1[,channel],type = 'l',xlab= 'seconds', ylab = names(data1[channel]),
main ='24hr_09_21_16_1&2')
}
data2 <- read.csv("24hr_09_21_16_3&4.csv", header=FALSE)
len <- length(data2[,1])
data2 <- data2[8:len,]
len <- length(data2[,1])
data2 <- data2*-1
colnames(data2) <- c("tags","sent_chan1","enz_chan2","sent_chan3","enz_chan4")
data2$seconds <- seq(0,((len-1)/2),0.5)
#plotting
for (channel in c(2,3,4,5)){
plot(data2$seconds,data2[,channel],type = 'l',xlab= 'seconds', ylab = names(data2[channel]),
main ='24hr_09_21_16_3&4')
}
data3 <- read.csv("9_22_16_5.6_48hrs.csv", header=FALSE)
len <- length(data3[,1])
data3 <- data3[8:len,]
len <- length(data3[,1])
data3 <- data3*-1
colnames(data3) <- c("tags","sent_chan1","enz_chan2","sent_chan3","enz_chan4")
data3$seconds <- seq(0,((len-1)/2),0.5)
#plotting
for (channel in c(2,3,4,5)){
plot(data3$seconds,data3[,channel],type = 'l',xlab= 'seconds', ylab = names(data3[channel]),
main ='9_22_16_5.6_48hrs')
}
data4 <- read.csv("9_22_16_3.4_24hrs.csv", header=FALSE)
len <- length(data4[,1])
data4 <- data4[8:len,]
len <- length(data4[,1])
data4 <- data4*-1
colnames(data4) <- c("tags","sent_chan1","enz_chan2","sent_chan3","enz_chan4")
data4$seconds <- seq(0,((len-1)/2),0.5)
#plotting
for (channel in c(2,3,4,5)){
plot(data4$seconds,data4[,channel],type = 'l',xlab= 'seconds', ylab = names(data4[channel]),
main ='9_22_16_3.4_24hrs')
}
data5 <- read.csv("9_22_16_1.2_24hrs.csv", header=FALSE)
len <- length(data5[,1])
data5 <- data5[8:len,]
len <- length(data5[,1])
data5 <- data5*-1
colnames(data5) <- c("tags","sent_chan1","enz_chan2","sent_chan3","enz_chan4")
data5$seconds <- seq(0,((len-1)/2),0.5)
#plotting
for (channel in c(2,3,4,5)){
plot(data5$seconds,data5[,channel],type = 'l',xlab= 'seconds', ylab = names(data5[channel]),
main ='9_22_16_1.2_24hrs')
}
library(foreign)
#general motif for reading in and cleaning data, although these files will already have had the
#column with tag text removed
data1 <- read.csv("24hr_09_21_16_1&2.csv", header=FALSE)
len <- length(data1[,1])
data1 <- data1[8:len,]
len <- length(data1[,1])
data1 <- data1*-1
colnames(data1) <- c("tags","enz_chan1","sent_chan2","nothing_1","nothing_2")
data1$seconds <- seq(0,((len-1)/2),0.5)
#plotting
# x= max(data1[2:5])
# plot(data1$seconds,data1$chan1, ylim=c(0,x), type = 'l')
# lines(data1$chan2)
# lines(data1$chan3)
# lines(data1$chan4)
for (channel in c(2,3)){
plot(data1$seconds,data1[,channel],type = 'l',xlab= 'seconds', ylab = names(data1[channel]),
main ='24hr_09_21_16_1&2')
}
data2 <- read.csv("24hr_09_21_16_3&4.csv", header=FALSE)
len <- length(data2[,1])
data2 <- data2[8:len,]
len <- length(data2[,1])
data2 <- data2*-1
colnames(data2) <- c("tags","sent_chan1","enz_chan2","sent_chan3","enz_chan4")
data2$seconds <- seq(0,((len-1)/2),0.5)
#plotting
for (channel in c(2,3,4,5)){
plot(data2$seconds,data2[,channel],type = 'l',xlab= 'seconds', ylab = names(data2[channel]),
main ='24hr_09_21_16_3&4')
}
data3 <- read.csv("9_22_16_5.6_48hrs.csv", header=FALSE)
len <- length(data3[,1])
data3 <- data3[8:len,]
len <- length(data3[,1])
data3 <- data3*-1
colnames(data3) <- c("tags","sent_chan1","enz_chan2","sent_chan3","enz_chan4")
data3$seconds <- seq(0,((len-1)/2),0.5)
#plotting
for (channel in c(2,3,4,5)){
plot(data3$seconds,data3[,channel],type = 'l',xlab= 'seconds', ylab = names(data3[channel]),
main ='9_22_16_5.6_48hrs')
}
data4 <- read.csv("9_22_16_3.4_24hrs.csv", header=FALSE)
len <- length(data4[,1])
data4 <- data4[8:len,]
len <- length(data4[,1])
data4 <- data4*-1
colnames(data4) <- c("tags","sent_chan1","enz_chan2","sent_chan3","enz_chan4")
data4$seconds <- seq(0,((len-1)/2),0.5)
#plotting
for (channel in c(2,3,4,5)){
plot(data4$seconds,data4[,channel],type = 'l',xlab= 'seconds', ylab = names(data4[channel]),
main ='9_22_16_3.4_24hrs')
}
data5 <- read.csv("9_22_16_1.2_24hrs.csv", header=FALSE)
len <- length(data5[,1])
data5 <- data5[8:len,]
len <- length(data5[,1])
data5 <- data5*-1
colnames(data5) <- c("tags","sent_chan1","enz_chan2","sent_chan3","enz_chan4")
data5$seconds <- seq(0,((len-1)/2),0.5)
#plotting
for (channel in c(2,3,4,5)){
plot(data5$seconds,data5[,channel],type = 'l',xlab= 'seconds', ylab = names(data5[channel]),
main ='9_22_16_1.2_24hrs')
}
#column with tag text removed
data1 <- read.csv("24hr_09_21_16_1&2.csv", header=FALSE)
len <- length(data1[,1])
data1 <- data1[8:len,]
len <- length(data1[,1])
data1 <- data1*-1
colnames(data1) <- c("tags","enz_chan1","sent_chan2","nothing_1","nothing_2")
data1$seconds <- seq(0,((len-1)/2),0.5)
#plotting
# x= max(data1[2:5])
# plot(data1$seconds,data1$chan1, ylim=c(0,x), type = 'l')
# lines(data1$chan2)
# lines(data1$chan3)
# lines(data1$chan4)
for (channel in c(2,3)){
plot(data1$seconds,data1[,channel],type = 'l',xlab= 'seconds', ylab = names(data1[channel]),
main ='24hr_09_21_16_1&2')
}
data1 <- read.csv("24hr_09_21_16_1&2.csv", header=FALSE)
library(afex)
library(Rcpp)
install.packages("Rcpp")
install.packages("loo")
library(foreign)
library(psych)
cleanFile<- function(filename){
steps <- matrix(data = NA, nrow =6, ncol=7)
colnames(steps) <- c('name','AA','choline1','choline2','choline3','H2O2','slope')
data1 <-read.csv(filename, col.names = c("marker","sent1","enz1","sent2","enz2"))
data1 <- na.omit(data1)
data1<-data.frame(data1)
data1<-data1[-c(1:6),] #remove the first 6 rows, which are garbage
data1[,2:5]<-data1[,2:5]*-1
# data1[,2:5]<-data1[,2:5]*1000
for(y in 2:5){ #dividing by response to H2O2
H2O2in <- which(data1$marker=="5")
H2O2done <- which(data1$marker=="6")
H2O2Response <- data1[H2O2done,y]-data1[H2O2in,y]
data1[y] <- data1[y]/H2O2Response}
#subtracting sentinel from enzyme channel
data1$electrode1 <- data1$enz1-data1$sent1
data1$electrode2 <- data1$enz2-data1$sent2
for(y in 2:7){
name <- colnames(data1)[y]
plot(data1[,y], type = "l", main = name)}
data1 <- data.frame(data1)
return(data1)
}
makeSteps <- function(data1){
steps <- matrix(data = NA, nrow =6, ncol=7)
colnames(steps) <- c('name','AA','Ch1','Ch2','Ch3','H2O2','slope')
data1[,2:5]<-data1[,2:5]*-1
AAin <- which(data1$marker=="1")
Ch1in <- which(data1$marker=="2")
Ch2in <- which(data1$marker=="3")
Ch3in <- which(data1$marker=="4")
H2O2in <- which(data1$marker=="5")
H2O2done <- which(data1$marker=="6")
z=1
for(y in 2:7) {
#creates matrix with steps for each channel
name <- colnames(data1)[y]
AA <- data1[Ch1in,y]-data1[AAin,y]
Ch1 <- data1[Ch2in,y]-data1[Ch1in,y]
Ch2 <- data1[Ch3in,y]-data1[Ch2in,y]
Ch3 <- data1[H2O2in,y]-data1[Ch3in,y]
H2O2 <- data1[H2O2done,y]-data1[H2O2in,y]
slopeMat1 <- matrix(data=NA,nrow = 4,ncol = 2)
colnames(slopeMat1) <- c('uM','pA')
slopeMat1[,1]<-c(0,20,40,60)
slopeMat1[,2]<-c(data1[Ch1in,y],data1[Ch2in,y],data1[Ch3in,y],data1[H2O2in,y])
slopeMat1 <- data.frame(slopeMat1)
fit1 <- lm(pA ~ uM, data=slopeMat1)
slope1 <- fit1$coefficients[[2]]
steps[z,]<-c(name,AA,Ch1,Ch2,Ch3,H2O2,slope1)
current <-c(data1[Ch1in,y] , data1[Ch2in,y] , data1[Ch3in,y] , data1[H2O2in,y])
choline <- c(0 , 20 , 40 , 60)
fit <- lm(current~choline)
plot(current~choline)
mySlope <- fit$coefficients[[2]]
steps[z,]<-c(name,AA,Ch1,Ch2,Ch3,H2O2, mySlope)
z=z+1}
steps <- data.frame(steps)
steps$selectivity <- (125 * steps$slope)/steps$AA
steps$AA <-  as.character(steps$AA)
steps$AA <- as.numeric(steps$AA)
steps$Ch1 <-  as.character(steps$Ch1)
steps$Ch1 <- as.numeric(steps$Ch1)
steps$Ch2 <-  as.character(steps$Ch2)
steps$Ch2 <- as.numeric(steps$Ch2)
steps$Ch3 <-  as.character(steps$Ch3)
steps$Ch3 <- as.numeric(steps$Ch3)
steps$H2O2 <-  as.character(steps$H2O2)
steps$H2O2 <- as.numeric(steps$H2O2)
steps$slope <- as.character(steps$slope)
steps$slope <- as.numeric(steps$slope)
steps$selectivity <- as.character(steps$selectivity)
steps$selectivity <- as.numeric(steps$selectivity)
return(steps)}
getSlope <- function(data1, electrodeColNum){
AAin <- which(data1$marker=="1")
Ch1in <- which(data1$marker=="2")
Ch2in <- which(data1$marker=="3")
Ch3in <- which(data1$marker=="4")
H2O2in <- which(data1$marker=="5")
H2O2done <- which(data1$marker=="6")
current <-c(data1[Ch1in,electrodeColNum] , data1[Ch2in,electrodeColNum] , data1[Ch3in,electrodeColNum] , data1[H2O2in,electrodeColNum])
choline <- c(0 , 20 , 40 , 60)
fit <- lm(current~choline)
plot(current~choline)
mySlope <- fit$coefficients[[2]]
return(mySlope) }
setwd("E:/")
hrv_data <- read.csv("HRV_PI.csv")
View(hrv_data)
hist(hrv_data$avg_HR)
hist(hrv_data$rmssd)
HR_data <- aggregate(hrv_data$avg_HR, by=list(rat,day))
library(reshape2)
hr_by_rat <- dcast(hrv_data, rat~session,value.var="avg_HR")
View(hr_by_rat)
rmssd_by_rat <- dcast(hrv_data, rat~session,value.var="rmssd")
View(rmssd_by_rat)
library(psych)
describe(hr_by_rat)
describe(rmssd_by_rat)
plot(1~2,data = rmssd_by_rat)
rmssd_by_rat <- data.frame(rmssd_by_rat)
hr_by_rat <- data.frame(hr_by_rat)
plot(X1~X2,data=rmssd_by_rat)
plot(X1~X2,data=hr_by_rat)
?lm
lm1 <- lm(X1~X2,data=rmssd_by_rat)
lm1
lm2 <- lm(X1~X2,data=hr_by_rat)
lm2
summary(lm1)
summary(lm2)
hist(rmssd_by_rat$X2)
setwd("~/GitHub/PI_rats_spring_2017/PI_spring_summer_2017/summer_hrv_experiment_data")
options(contrasts=c("contr.sum", "contr.poly"))
library(foreign)
library(psych)
library(reshape2)
library(ggplot2)
library(car)
library(ez)
library(Rmisc)
library(gmodels)
library(wesanderson)
library(afex)
# for AB acquisition
sessList <- list(136,137,138,139)#list session nubmers here
ratList <- list(101,102,103,104,105,106,107,108,109,110,112)#list rat number here
x <- length(sessList)
y <- length(ratList)
rowsNeeded <- (x*y)
ABsummary <- matrix(data = NA, nrow = rowsNeeded, ncol=3)
colnames(ABsummary)<- c('ratID', 'session', 'accuracy')
i = 1
for (sessNum in sessList){
for (rat in ratList) {
filename <- paste("U3_",rat,"_",sessNum,".csv", sep="")
print(filename)
currentData <- read.csv(filename, header=TRUE, sep="\t")
currentData$resp2 <- ifelse(currentData$Response == "correct", 1,0)
currentAB <- subset(currentData, trialType == "AB")
ABacc <- mean(currentAB$resp2)
ABsummary[i,0:3] <- c(rat, sessNum, ABacc)
i=i+1
}
}
ABsummary <- data.frame(ABsummary)
ABsummary$ratID <- as.factor(ABsummary$ratID)
ABsummary$session <- as.factor(ABsummary$session)
ABsummaryTable <- aggregate(accuracy~session, data=ABsummary, FUN=(mean))
tempTable <- aggregate(accuracy~session, data=ABsummary, FUN=(sd))
ABsummaryTable<- as.data.frame(ABsummaryTable)
ABsummaryTable$sd <- tempTable$accuracy*100
tempTable$accuracy <- tempTable$accuracy/sqrt(y)
ABsummaryTable$se <- tempTable$accuracy*100
ABsummaryTable$accuracy <- ABsummaryTable$accuracy * 100
#for full task
sessList <- list(140,141,142,143,144)#list session nubmers here
ratList <- list(101,102,103,104,105,106,107,108,109,110,112)#list rat number here
x <- length(sessList)
y <- length(ratList)
rowsNeeded <- (x*y)
FULLsummary <- matrix(data = NA, nrow = rowsNeeded, ncol=5)
colnames(FULLsummary)<- c('ratID', 'session', 'AB_acc', 'AC_acc', 'DE_acc')
i = 1
for (sessNum in sessList){
for (rat in ratList) {
filename <- paste("U3_",rat,"_",sessNum,".csv", sep="")
print(filename)
currentData <- read.csv(filename, header=TRUE, sep="\t")
currentData$resp2 <- ifelse(currentData$Response == "correct", 1,0)
currentAB <- subset(currentData, trialType == "AB")
ABacc <- mean(currentAB$resp2)
currentDE <- subset(currentData, trialType == "DE")
DEacc <- mean(currentDE$resp2)
currentAC <- subset(currentData, trialType == "CA")
ACacc <- mean(currentAC$resp2)
FULLsummary[i,0:5] <- c(rat, sessNum, ABacc, ACacc, DEacc)
i=i+1
}
}
#prepare wide and long form data frames for full task
FULLfinalSummaryW <- data.frame(FULLsummary)
#FULLfinalSummaryW$PI_effect <- FULLfinalSummaryW$DE_acc - FULLfinalSummaryW$AC_acc
z = rowsNeeded*3
FULLfinalSummaryL <- reshape(FULLfinalSummaryW, varying = c('AB_acc', 'AC_acc', 'DE_acc'), v.names="accuracy",
timevar='trialType',times=c('AB', 'CA', 'DE'), new.row.names=1:z, direction = 'long')
FULLfinalSummaryL$ratID <-as.factor(FULLfinalSummaryL$ratID)
FULLfinalSummaryL$session <-as.factor(FULLfinalSummaryL$session)
FULLfinalSummaryL$trialType <- as.factor(FULLfinalSummaryL$trialType)
FULLfinalSummaryW$ratID <-as.factor(FULLfinalSummaryW$ratID)
FULLfinalSummaryW$session <-as.factor(FULLfinalSummaryW$session)
#making summary table for full task
FULLsummaryTable <- aggregate(accuracy~trialType, data=FULLfinalSummaryL, FUN=(mean))
tempTable <- aggregate(accuracy~trialType, data=FULLfinalSummaryL, FUN=(sd))
FULLsummaryTable<- as.data.frame(FULLsummaryTable)
FULLsummaryTable$sd <- tempTable$accuracy
tempTable$accuracy <- tempTable$accuracy/sqrt(y)
FULLsummaryTable$se <- tempTable$accuracy
FULLsummaryTable$accuracy <- FULLsummaryTable$accuracy
#part 1 - AB acquisition
#check distribution
describe(ABsummary)
hist(ABsummary$accuracy,main = ('Distribution of Accuracy during AB acquisiton, all sessions'),xlab = ('AB accuracy'))
#distribution is actually a bit strange, though all above chance - also pretty small number of rats
plot(accuracy~session, data=ABsummary, main=('AB accuracy by session, AB acquisition'))
mean(ABsummary$accuracy)
# no interesting results, though by the end of the first session the group average was almost 80% accuracy
#part 2 - full task
describe(FULLfinalSummaryW)
describe(FULLfinalSummaryL)
hist(FULLfinalSummaryL$accuracy, main = ('Distribution of Overall Accuracy, Full Task Days'),xlab=('Overall Accuracy'))
#accuracy for the full task is normally distributed
plot(accuracy~session, data=FULLfinalSummaryL,main=('Overall accuracy by session, full task days'))
#looks like session didn't ahve much effect
p1= ggplot(data=FULLfinalSummaryL, aes(trialType,accuracy))
p1+geom_boxplot(aes(fill=trialType)) +
coord_cartesian(ylim=c(0,1))+
ggtitle("Accuracy by Trial type, averages across full task days") +
labs(x="Trial Type",y="Accuracy")+
scale_fill_manual(values=wes_palette("Cavalcanti"))+
guides(fill=guide_legend(title="trial type"))
#inferential tests of full task
qqnorm(FULLfinalSummaryL$accuracy)
qqline(FULLfinalSummaryL$accuracy) #to check for normality of residuals
aov1 <- ezANOVA(data=FULLfinalSummaryL, dv=accuracy, wid = ratID,within=c(trialType,session),detailed=TRUE,return_aov = TRUE)
aov1$`Mauchly's Test for Sphericity` #to quckly check sphericity, which is fine in this case
#I used ezANOVA to get the sphericity test but I can't figure out how to do post hoc analyses with that output
aov2 <- aov_ez("ratID","accuracy",data=FULLfinalSummaryL,within = c("trialType","session"))
summary(aov2)
lsmeans(aov2, "trialType", contr = "pairwise", adjust = "holm")
ggplot(FULLsummaryTable, aes(x=trialType, y=accuracy, fill=trialType)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
coord_cartesian(ylim=c(0,1))+
geom_errorbar(aes(ymin=accuracy-se, ymax=accuracy+se), width=.2,
position=position_dodge(.9)) +
scale_fill_manual(values=wes_palette("FantasticFox"))+
ggtitle("Accuracy by trial trype, averaged across days")+
guides(fill=guide_legend(title="trial type")) +
labs(x="Trial Type",y="Accuracy")
FULLsummaryTable <- aggregate(accuracy~trialType+session, data=FULLfinalSummaryL, FUN=(mean))
tempTable <- aggregate(accuracy~trialType+session, data=FULLfinalSummaryL, FUN=(sd))
FULLsummaryTable<- as.data.frame(FULLsummaryTable)
FULLsummaryTable$sd <- tempTable$accuracy
tempTable$accuracy <- tempTable$accuracy/sqrt(y)
FULLsummaryTable$se <- tempTable$accuracy
FULLsummaryTable$accuracy <- FULLsummaryTable$accuracy
subSummaryTable <-subset(FULLsummaryTable, trialType != 'AB')
ggplot(subSummaryTable, aes(x=session,y=accuracy,colour = trialType))+
geom_line(aes(group=trialType))+geom_point()+
geom_errorbar(aes(ymin=accuracy-se, ymax=accuracy+se),width=.05)+
ggtitle('Accuracy by Trial Type and Session, Full Task Days')
ggplot(FULLsummaryTable, aes(x=session,y=accuracy,colour = trialType))+
geom_line(aes(group=trialType))+
geom_point()+geom_errorbar(aes(ymin=accuracy-se, ymax=accuracy+se),width=.1,position=position_dodge(.05))+
coord_cartesian(ylim=c(.4,1))+
guides(colour=guide_legend(title="trial type"))+
scale_color_manual(values=wes_palette("FantasticFox"))+
ggtitle('Accuracy by Trial Type and Session, Full Task Days')
plot(PI_effect~session,data=FULLfinalSummaryW, main=('PI effect (DE - CA) by session'),ylab = ('PI Effect'))
AB_wide <- dcast(ABsummary, ratID~session, value.var = "accuracy")
AB_wide$last_two_days <- (AB_wide$`138`+ AB_wide$`139`)/2
keepRats <- subset(AB_wide, last_two_days >=.70)
keepRats <- array(keepRats$ratID)
data2 <- subset(FULLfinalSummaryW, ratID %in% keepRats)
data3 <- subset(FULLfinalSummaryL, ratID %in% keepRats)
data3Table <- aggregate(accuracy~trialType+session, data=data3, FUN=(mean))
tempTable <- aggregate(accuracy~trialType+session, data=data3, FUN=(sd))
data3Table<- as.data.frame(data3Table)
data3Table$sd <- tempTable$accuracy
tempTable$accuracy <- tempTable$accuracy/sqrt(y)
data3Table$se <- tempTable$accuracy
data3Table$accuracy <- data3Table$accuracy
ggplot(data3Table, aes(x=session,y=accuracy,colour = trialType))+
geom_line(aes(group=trialType))+
geom_point()+geom_errorbar(aes(ymin=accuracy-se, ymax=accuracy+se),width=.1,position=position_dodge(.05))+
coord_cartesian(ylim=c(.4,1))+
guides(colour=guide_legend(title="trial type"))+
scale_color_manual(values=wes_palette("FantasticFox"))+
ggtitle("High performers' Accuracy by Trial Type and Session, Full Task Days")
# PI_effect_only <- subset(FULLfinalSummaryL, trialType=="PI")
# aov3 <- aov_ez("ratID","accuracy", data=PI_effect_only,within=c("session"))
# summary(aov3)
# lsmeans(aov3, "session", contr = "pairwise", adjust = "holm")
#simple main effects for trial type within each full task session
sess140 <- subset(FULLfinalSummaryL, session == "140")
sess141 <- subset(FULLfinalSummaryL, session == "141")
sess142 <- subset(FULLfinalSummaryL, session == "142")
sess143 <- subset(FULLfinalSummaryL, session == "143")
sess144 <- subset(FULLfinalSummaryL, session == "144")
aov4 <- aov_ez("ratID","accuracy",data=sess140,within=c("trialType"))
aov5 <- aov_ez("ratID","accuracy",data=sess141,within=c("trialType"))
aov6 <- aov_ez("ratID","accuracy",data=sess142,within=c("trialType"))
aov7 <- aov_ez("ratID","accuracy",data=sess143,within=c("trialType"))
aov8 <- aov_ez("ratID","accuracy",data=sess144,within=c("trialType"))
lsmeans(aov4, "trialType", contr = "pairwise", adjust = "holm")
lsmeans(aov5, "trialType", contr = "pairwise", adjust = "holm")
lsmeans(aov6, "trialType", contr = "pairwise", adjust = "holm")
lsmeans(aov7, "trialType", contr = "pairwise", adjust = "holm")
lsmeans(aov8, "trialType", contr = "pairwise", adjust = "holm")
slopeComparison <- matrix(data=NA,nrow=length(keepRats),ncol = 4)
colnames(slopeComparison)<-c("ratID","DE_slope","AC_slope","slope_diff")
sessions <- array(140:142)
i=1
for(rat in keepRats){
subset1 <- subset(FULLfinalSummaryW, session %in% sessions)
subset2 <- subset(subset1, ratID == rat)
subset2$session <- as.character(subset2$session)
subset2$session <- as.numeric(subset2$session)
lmAC <- lm(subset2$AC_acc~subset2$session)
slopeAC<-lmAC$coefficients[[2]]
lmDE<- lm(subset2$DE_acc~subset2$session)
slopeDE<-lmDE$coefficients[[2]]
slopeDiff <- slopeDE-slopeAC
slopeComparison[i,]<-c(rat,slopeDE,slopeAC,slopeDiff)
#plot(subset2$session,subset2$DE_acc, col="red", type="l")
#plot(subset2$session,subset2$AC_acc,col="blue", type="l")
i=i+1
}
slopeComparison<-as.data.frame(slopeComparison)
describe(slopeComparison)
hist(slopeComparison$DE_slope)
hist(slopeComparison$AC_slope)
hist(slopeComparison$slope_diff)
t.test(slopeComparison$DE_slope,slopeComparison$AC_slope, paired = TRUE)
View(rmssd_by_rat)
View(FULLfinalSummaryW)
View(subset1)
View(subset2)
View(FULLfinalSummaryW)
View(data2)
View(data3)
View(data3Table)
View(FULLsummaryTable)
PI_by_rat <- aggregate(accuracy~list(ratID,trialType),data=FULLfinalSummaryW,FUN='mean')
View(slopeComparison)
View(FULLfinalSummaryW)
PI_by_rat <- aggregate(accuracy~list(ratID,trialType),data=FULLfinalSummaryL,FUN='mean')
PI_by_rat <- aggregate(accuracy,by=list(ratID,trialType),data=FULLfinalSummaryL,FUN='mean')
PI_by_rat <- aggregate(accuracy,by=list(ratID,trialType),data=FULLfinalSummaryL,FUN='mean')
PI_by_rat <- aggregate(FULLfinalSummaryL$accuracy,by=list(ratID,trialType),data=FULLfinalSummaryL,FUN='mean')
PI_by_rat <- aggregate(FULLfinalSummaryL$accuracy,by=list(FULLfinalSummaryL$ratID,FULLfinalSummaryL$trialType),data=FULLfinalSummaryL,FUN='mean')
View(PI_by_rat)
View(FULLfinalSummaryW)
View(FULLfinalSummaryL)
